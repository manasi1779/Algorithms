import java.util.Scanner;

public class CountShortestPaths {
	
	static int noOfVertices, noOfEdges, src, dest;
	static Graph<Integer> graph;
	
	static Scanner s = new Scanner(System.in);

	public static void main(String[] args) {
		getInput();
		System.out.println(getShortestPaths());
	}
	
	public static void getInput(){
		noOfVertices = s.nextInt();
		noOfEdges = s.nextInt();
		src = s.nextInt();
		dest = s.nextInt();
		graph = new Graph<Integer>(noOfVertices);
		for(int  i= 0; i<noOfEdges; i++){
			graph.addEdge(s.nextInt(), s.nextInt(), 0);
		}		
		Vertex[] arr = graph.vertices;
		for(int i = 0; i<arr.length; i++){
			List<Edge> connected = arr[i].connectedTo;
			for(int j = 0; j < connected.size; j++ ){
				System.out.println(arr[i].ID+ " connected to "+connected.get(j).ID);
			}
		}
	}
	
	public static int getShortestPaths(){
		if(src == dest)
			return 0;
		System.out.println("path from "+src+" to "+dest);
		List<Edge> connections = graph.vertices[src].getConnections();
		int shortestPath = 0, numberOfPaths=0;
		boolean seen[] = new boolean[noOfVertices];
		int dist[] = new int[noOfVertices];
		for(int i = 0; i < noOfVertices; i++){			
			seen[i] = false;
		}
		shortestPath = 0; 
		List queue = new List();
		queue.add(src);
		seen[src] = true;
		dist[src] = 0;
		while(queue.size!=0){
			int next = (int)queue.get(0);
			System.out.println(next+" path "+shortestPath);
			queue.remove(0);
			if(next!=dest){
				seen[next] = true;
				List<Edge> innerConnections = graph.vertices[next].getConnections();
				for(int i = 0; i<innerConnections.size; i++){
					if(dist[innerConnections.get(i).ID] == 0){
						dist[innerConnections.get(i).ID] = dist[next] + 1;
						System.out.println("Distance updated "+dist[innerConnections.get(i).ID]);
					}
					if(innerConnections.get(i).ID == dest){
						System.out.println("dest found");
						seen[innerConnections.get(i).ID] = false;
						if(shortestPath == 0){
							shortestPath = dist[innerConnections.get(i).ID];
							System.out.println("shortest path is "+ shortestPath);
							numberOfPaths = 1;
						}
						else if(dist[innerConnections.get(i).ID] == shortestPath){
							numberOfPaths++;
							System.out.println("Number of paths incremented");
						}
					}	
					else{
						if(shortestPath != 0 && dist[innerConnections.get(i).ID]>shortestPath)
							seen[innerConnections.get(i).ID] = true;
						else if(!seen[innerConnections.get(i).ID])
							queue.add(innerConnections.get(i).ID);
					} 
				}
			}
			else{
				if(shortestPath == 0){
					shortestPath = dist[next];
					System.out.println("shortest path is "+ shortestPath);
					numberOfPaths = 1;
				}
				else if(dist[next] == shortestPath){
					numberOfPaths++;
					System.out.println("Number of paths incremented");
				}
			}
		}
		System.out.println("shortest path "+shortestPath);
		return numberOfPaths;
	}	
}